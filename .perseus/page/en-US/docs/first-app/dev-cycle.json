{"state":{"content":"<h1>Development Cycle</h1>\n<p>When you're developing a Perseus app, you'll generally have two &quot;modes&quot;: coding, and fine-tuning. In the <em>coding</em> stage, you're building features of your app, which will typically involve quite a lot of working on business logic, etc. If you're familiar with Rust programming, this is the stage when you'd be using <code>cargo check</code> instead of <code>cargo run</code>. Conveniently, Perseus provides <code>perseus check -w</code> for this, which will not only <code>cargo check</code> your app's engine-side, but also the browser-side, because each one is built for a different target. This command is <em>much</em> faster than <code>perseus serve</code>, because it just checks your code, rather than actually compiling it. If you want to test your build logic as well, you can run <code>perseus check -gw</code>, which will also test this (but that will take a bit longer).</p>\n<p>When you're using an IDE, like VS Code, you'll usually want proper syntax highlighting, and you may find that Perseus can cause a few problems. This is because Perseus distinguishes between the engine and the browser by using a custom feature, so you'll need to create a <code>.cargo/config.toml</code> file in the root of your project with the following contents:</p>\n<pre><code class=\"language-toml\">[build]\nrustflags = [ &quot;--cfg&quot;, &quot;engine&quot; ]\n</code></pre>\n<p>That will set up your IDE to only check your app's engine-side code, which, somewhat counterintuitively, <em>does</em> include things like <code>view!</code>, because, remember, Perseus renders everything ahead of time, so it still needs access to all that on the engine-side. Usually, this will be enough, but, when you're working on some browser-only logic, you can change that <code>engine</code> to be <code>browser</code> instead, and your IDE will automatically update. These settings won't affect commands like <code>perseus check</code> or <code>perseus serve</code>, which provide these flags automatically.</p>\n<p>Importantly, any time you don't need to be actually seeing the views your app is producing, you should use <code>perseus check</code> instead of one of the other commands, because it will be <em>much</em> faster (especially if you follow <a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/compilation-times\">these tips</a>).</p>\n<p>Then, when you need to see what your app looks like in a browser, for example when you're styling it, or testing a particular feature, you can use <code>perseus serve -w</code>. If you're updating static content (like a <code>.css</code> file), rebuilds will be pretty much instant, but updating the Rust code of your app will be a fair bit slower. This is unfortunately a downside of working with Rust web development, but, in return, you get an <em>extremely</em> performant site that eliminates whole classes of bugs that run rampant in JS code.</p>\n<p>Importantly <strong>if you're doing any kind of logging, you'll need <code>perseus snoop</code></strong>! This series of commands (i.e. <code>perseus snoop build</code>, <code>perseus snoop wasm-build</code>, and <code>perseus snoop serve</code>) will run each of the stages of your app manually, returning all output, whereas the default commands will only show logs if there's an error (meaning those <code>dbg!</code> calls will vanish into the ether).</p>\n<p><em>Note: there is currently ongoing development on the Sycamore side for a system to remove the need for recompilation when you change things in the <code>view! { .. }</code> macro, which will dramatically improve performance.</em></p>\n<h2>Custom watches</h2>\n<p>Sometimes you'll want <code>perseus</code> to watch more than just your source code. For example, when we're writing some new docs for this website, we want the <code>docs</code> folder to be watched, so we run something like this</p>\n<pre><code>perseus serve -w --custom-watch ../docs\n</code></pre>\n<p>This system works pretty much exactly how you'd expect it to: paths are relative to the current directory, and recursion works as you'd expect. If you want to <em>exclude</em> some paths (e.g. if you have another build tool running to generate a stylesheet automatically), you can use <code>--custom-watch !my-path</code>, which will work with nesting. Exclusions will override inclusions in this system.</p>\n","current_version":"0.4.x","manifest":{"0.1.x":{"docs_rs":"0.1","git":"v0.1.4","state":"outdated"},"0.2.x":{"docs_rs":"0.2","git":"v0.2.3","state":"outdated"},"0.3.0-0.3.3":{"docs_rs":"0.3.3","git":"v0.3.3","state":"outdated"},"0.3.4":{"docs_rs":"0.3","git":"v0.3.6","state":"outdated"},"0.4.x":{"docs_rs":"0.4","git":"HEAD","state":"stable"}},"sidebar_content":"<h1>Introduction</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/intro\">Introduction</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/quickstart\">Quickstart</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/what-is-perseus\">What is Perseus?</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/core-principles\">Core Principles</a></li>\n</ul>\n<h1>Your First App</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/first-app/installation\">Installing Perseus</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/first-app/defining\">Defining your app</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/first-app/generating-pages\">Generating pages</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/first-app/dev-cycle\">Development cycle</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/first-app/error-handling\">Error handling</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/first-app/deploying\">Deploying your app</a></li>\n</ul>\n<h1>Fundamentals</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/perseus-app\"><code>PerseusApp</code></a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/reactor\">The reactor</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/routing\">Routing and navigation</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/preloading\">Preloading</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/i18n\">Internationalization</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/error-views\">Error views</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/hydration\">Hydration</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/static-content\">Static content</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/head-headers\">Heads and headers</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/styling\">Styling</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/js-interop\">Working with JS</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/serving-exporting\">Servers and exporting</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/debugging\">Debugging</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/testing\">Writing tests</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/plugins\">Plugins</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/fundamentals/compilation-times\">Improving Compilation Times</a></li>\n</ul>\n<h1>The State Platform</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/intro\">Understanding state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/build\">Build-time state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/request\">Request-time state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/revalidation\">Revalidation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/incremental\">Incremental generation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/amalgamation\">State amalgamation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/browser\">Using state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/global\">Global state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/helper\">Helper state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/suspense\">Suspended state</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/freezing-thawing\">Freezing and thawing</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/state/manual\">Manually implementing <code>ReactiveState</code></a></li>\n</ul>\n<h1>Capsules</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/capsules/intro\">Introduction</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/capsules/using\">Using capsules</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/capsules/capsules-vs-components\">Capsules vs. components</a></li>\n</ul>\n<h1>Miscellaneous</h1>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/migrating\">Migrating from v0.3.x</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.4.x/faq\">Common pitfalls and FAQs</a></li>\n</ul>\n","status":"Stable","title":"Development Cycle"},"head":"<title>Development Cycle | Perseus Docs</title><link rel=stylesheet href=.perseus/static/styles/markdown.css><link rel=stylesheet href=.perseus/static/styles/docs_links_markdown.css><link rel=stylesheet href=.perseus/static/prism.css>"}