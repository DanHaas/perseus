{"state":"{\"title\":\"Building\",\"content\":\"<h1>Building</h1>\\n<p><em>You only need this page if you're not using the Perseus CLI, which performs this process for you!</em></p>\\n<p>After you've defined all your templates and the like, you'll of course need to build them into pages! Perseus tries to make this process as simple as possible.</p>\\n<h2>Usage</h2>\\n<p>You'll want to be able to execute this code as part of an executable, so defining a new binary in your <code>Cargo.toml</code> is advised like so:</p>\\n<pre><code class=\\\"language-toml\\\">[[bin]]\\nname = &quot;ssg&quot;\\npath = &quot;src/bin/build.rs&quot;\\n</code></pre>\\n<p>Then put this code in <code>bin/build.rs</code> (or wherever else you put your binary)</p>\\n<pre><code class=\\\"language-rust\\\">use futures::executor::block_on;\\nuse perseus::{build::build_templates, config_manager::FsConfigManager};\\nuse perseus_showcase_app::pages;\\nuse sycamore::prelude::SsrNode;\\n\\nfn main() {\\n    let config_manager = FsConfigManager::new();\\n\\n    let fut = build_templates(\\n        vec![\\n            pages::index::get_page::&lt;SsrNode&gt;(),\\n            pages::about::get_page::&lt;SsrNode&gt;(),\\n            pages::post::get_page::&lt;SsrNode&gt;(),\\n            pages::new_post::get_page::&lt;SsrNode&gt;(),\\n            pages::ip::get_page::&lt;SsrNode&gt;(),\\n            pages::time::get_page::&lt;SsrNode&gt;(),\\n            pages::time_root::get_page::&lt;SsrNode&gt;(),\\n        ],\\n        &amp;config_manager,\\n    );\\n    block_on(fut).expect(&quot;Static generation failed!&quot;);\\n\\n    println!(&quot;Static generation successfully completed!&quot;);\\n}\\n</code></pre>\\n<p>This code defines a synchronous <code>main</code> function that blocks to call <code>build_templates</code>, which, unsurprisingly, builds your templates! Each entry in the vector you give this function should be a template, and note that we specify they should be <code>SsrNode</code>s, which is Sycamore's way of saying they should be prepared to be rendered on the server rather than in the browser, which makes sense given that we're building them!</p>\\n<p>The reason we don't just make this whole function asynchronous is so we don't have to include a runtime like <code>tokio</code>, which would be unnecessary.</p>\\n<h2>File Storage</h2>\\n<p>It may have crossed your mind as to where all these static files are stored in production, and Perseus provides an excellent solution to this problem with custom read/write systems, documented in-depth <a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/config_managers\\\">here</a>.</p>\\n\",\"sidebar_content\":\"<ul>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/intro\\\">Introduction</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/setup\\\">Setup</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/arch\\\">Architecture</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/tutorials/first_app/intro\\\">Building Your First App</a>\\n<ul>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/tutorials/first_app/setup\\\">Installation and Setup</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/tutorials/first_app/template\\\">Writing Your First Template</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/tutorials/first_app/app\\\">Setting up the App Itself</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/cli\\\">CLI</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/templates\\\">Templates</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/routing\\\">Routing</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/error_pages\\\">Error Pages</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/intro\\\">Rendering Strategies</a>\\n<ul>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/build_paths\\\">Build Paths</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/build_state\\\">Build State</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/request_state\\\">Request State</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/revalidation\\\">Revalidation</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/incremental\\\">Incremental generation</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/building\\\">Building</a></li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/serving\\\">Serving</a>\\n<ul>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/integrations/actix-web\\\">Actix Web Integration</a></li>\\n</ul>\\n</li>\\n<li><a href=\\\"https://framesurge.sh/perseus/en-US/docs/0.1.x/config_managers\\\">Config Managers</a></li>\\n</ul>\\n\",\"status\":\"Outdated\",\"manifest\":{\"0.1.x\":{\"state\":\"outdated\",\"git\":\"v0.1.4\",\"docs_rs\":\"0.1\"},\"0.2.x\":{\"state\":\"outdated\",\"git\":\"v0.2.3\",\"docs_rs\":\"0.2\"},\"0.3.0-0.3.3\":{\"state\":\"outdated\",\"git\":\"v0.3.3\",\"docs_rs\":\"0.3.3\"},\"0.4.x\":{\"state\":\"beta\",\"git\":\"HEAD\",\"docs_rs\":\"0.4.0-beta\"},\"0.3.4\":{\"state\":\"stable\",\"git\":\"v0.3.6\",\"docs_rs\":\"0.3\"}},\"current_version\":\"0.1.x\"}","head":"<title>Building | Perseus Docs</title><link rel=\"stylesheet\" href=\".perseus/static/styles/markdown.css\"/><link rel=\"stylesheet\" href=\".perseus/static/styles/docs_links_markdown.css\"/><link rel=\"stylesheet\" href=\".perseus/static/prism.css\"/>"}