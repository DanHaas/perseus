{"state":{"content":"<h1>Templates</h1>\n<p>The most central part of Perseus is the definition of templates, which control how pages are built.</p>\n<h2>Usage</h2>\n<p>An extremely simple template would look like this:</p>\n<pre><code class=\"language-rust\">use perseus::Template;\nuse sycamore::prelude::{component, template, GenericNode, Template as SycamoreTemplate};\n\n#[component(AboutPage&lt;G&gt;)]\npub fn about_page() -&gt; SycamoreTemplate&lt;G&gt; {\n    template! {\n        p { &quot;About.&quot; }\n    }\n}\n\npub fn template_fn&lt;G: GenericNode&gt;() -&gt; perseus::template::TemplateFn&lt;G&gt; {\n    Box::new(|_| {\n        template! {\n            AboutPage()\n        }\n    })\n}\n\npub fn get_template&lt;G: GenericNode&gt;() -&gt; Template&lt;G&gt; {\n    Template::new(&quot;about&quot;).template(template_fn())\n}\n</code></pre>\n<p>First, we define the <em>component function</em>, which is done with Sycamore. This is the page itself, and it contains its actual markup, in Sycamore's templating syntax (you can read more about that <a href=\"\">here</a>). Next is the <em>template function</em>, which simply defines a function that will actually render the page. We break this simple closure out into a function to get it because we'll reuse it in the routing process later. If your page takes a state, it will be passed to this closure <strong>as a string</strong>. You must then deserialize it, and it is safe to <code>.unwrap()</code> here (barring a horrific logic failure). The final function we define is the <em>page function</em>, which just creates the actual template for the page.</p>\n<h2>Template Definition</h2>\n<p>You can define a template with the <code>Template::new()</code> method, which takes the template's path as an argument (with no leading or trailing slashes). In the above example, <code>about</code> renders only one page, which would be hosted at <code>/about</code>.</p>\n<p>The only mandatory builder function after that is <code>.template()</code>, which defines your template function (the closure inside <code>template_fn()</code> in the above example). There are a number of other functions available to customize how the template renders, all of which are documented <a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/intro\">here</a>.</p>\n","current_version":"0.1.x","manifest":{"0.1.x":{"docs_rs":"0.1","git":"v0.1.4","state":"outdated"},"0.2.x":{"docs_rs":"0.2","git":"v0.2.3","state":"outdated"},"0.3.0-0.3.3":{"docs_rs":"0.3.3","git":"v0.3.3","state":"outdated"},"0.3.4":{"docs_rs":"0.3","git":"v0.3.6","state":"outdated"},"0.4.x":{"docs_rs":"0.4","git":"HEAD","state":"stable"}},"sidebar_content":"<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/intro\">Introduction</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/setup\">Setup</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/arch\">Architecture</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/tutorials/first_app/intro\">Building Your First App</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/tutorials/first_app/setup\">Installation and Setup</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/tutorials/first_app/template\">Writing Your First Template</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/tutorials/first_app/app\">Setting up the App Itself</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/cli\">CLI</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/templates\">Templates</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/routing\">Routing</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/error_pages\">Error Pages</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/intro\">Rendering Strategies</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/build_paths\">Build Paths</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/build_state\">Build State</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/request_state\">Request State</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/revalidation\">Revalidation</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/strategies/incremental\">Incremental generation</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/building\">Building</a></li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/serving\">Serving</a>\n<ul>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/integrations/actix-web\">Actix Web Integration</a></li>\n</ul>\n</li>\n<li><a href=\"https://framesurge.sh/perseus/en-US/docs/0.1.x/config_managers\">Config Managers</a></li>\n</ul>\n","status":"Outdated","title":"Templates"},"head":"<title>Templates | Perseus Docs</title><link rel=stylesheet href=.perseus/static/styles/markdown.css><link rel=stylesheet href=.perseus/static/styles/docs_links_markdown.css><link rel=stylesheet href=.perseus/static/prism.css>"}